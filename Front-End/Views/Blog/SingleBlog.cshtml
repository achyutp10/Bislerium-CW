@using System.Security.Claims
@model Domain.Entity.Blog


@{
    ViewData["Title"] = "SingleBlog";
}
<link href="~/css/style.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<h1>Uploaded By: @Html.DisplayFor(model => model.userFK.Email)</h1>

@* <div>
    <h4>Blog</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Id)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Id)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.BlogTitle)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.BlogTitle)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.BlogContent)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.BlogContent)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.ImageName)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.ImageName)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CreatedDate)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CreatedDate)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.User)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.User)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.LikeCount)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.LikeCount)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.DislikeCount)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.DislikeCount)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.CommentCount)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.CommentCount)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Popularity)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Popularity)
        </dd>
    </dl>
</div> *@
@* <div>
    @Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ }) |
    <a asp-action="Index">Back to List</a>
</div> *@

<section class="blog-post-section">
    <div class="main-container">
        <div class="blog-post-card">
            
            <div class="heading-blog-post">
                <h6 class="reaction-button mt-1">Popularity: @Html.DisplayFor(modelItem => Model.Popularity)</h6>
                <h2>@Html.DisplayFor(model => model.BlogTitle)</h2>
                
                <h3>Date: @Html.DisplayFor(model => model.CreatedDate)</h3>
            </div>
            <div class="blog-content">
                <img src="@Url.Content("~/Images/Blogs/" + Model.ImageName)" alt="Blog Post Image">

                <p>
                    @Html.DisplayFor(model => model.BlogContent)
                </p>
            </div>

            <div class="blog-reactions">

                @if (User.Identity.IsAuthenticated)
                {
                    <form asp-controller="Blog" asp-action="UpvoteLike" method="post" class="like-button-form">
                        <input value="@User.FindFirstValue(ClaimTypes.NameIdentifier)?.ToString()" name="User" hidden />
                        <input value="@Model.Id" name="Blog" hidden />
                        <button type="submit" class="reaction-button like-button"><i class="fas fa-thumbs-up"></i> Upvote <span id="upvote-count"> @Html.DisplayFor(modelItem => Model.LikeCount)</span></button>

                    </form>
                    <form asp-controller="Blog" asp-action="DownvoteLike" method="post" class="like-button-form">
                        <input value="@User.FindFirstValue(ClaimTypes.NameIdentifier)?.ToString()" name="User" hidden />
                        <input value="@Model.Id" name="Blog" hidden />
                        <button id="downvote" type="submit" class="reaction-button"><i class="fas fa-thumbs-down"></i> Downvote <span id="downvote-count"> @Html.DisplayFor(modelItem => Model.DislikeCount)</span></button>
                    </form>
                }
                @* <button id="upvote" class="reaction-button"><i class="fas fa-thumbs-up"></i> Upvote <span id="upvote-count"> @Html.DisplayFor(modelItem => Model.LikeCount)</span></button> *@
                @* <button id="downvote" class="reaction-button"><i class="fas fa-thumbs-down"></i> Downvote <span id="downvote-count">0</span></button> *@
            </div>

            @* <div class="comments-section">
                <h3>Comments</h3>
                <ul id="comments-list">
                    <li>No comments yet.</li>
                </ul>
                <form id="comment-form">
                    <label for="comment-text">Add a comment:</label>
                    <textarea id="comment-text" placeholder="Write your comment here" rows="3"></textarea>
                    <button type="submit">Add Comment</button>
                </form>
            </div> *@
            <div class="comments-section">
                <h3>Comments</h3>
                <ul id="comments-list">
                    @if (Model.Comments != null && Model.Comments.Any())
                    {
                        foreach (var comment in Model.Comments)
                        {
                            <li>
                                <div class="d-flex justify-content-start gap-2">
                                    <strong>@comment.User?.Email</strong>
                                    <span>@comment.PostedAt.ToString("yyyy-MM-dd")</span>
                                    @if (User.Identity.IsAuthenticated && comment.User != null && comment.User.Id == User.FindFirstValue(ClaimTypes.NameIdentifier))
                                    {
                                        <a href="@Url.Action("UpdateComment", "Blog", new { id = comment.Id })" class="btn btn-success">Edit</a>


                                        <form asp-controller="Blog" asp-action="DeleteComment" method="post" onsubmit="return confirm('Are you sure you want to delete this blog?');">
                                            <input type="hidden" name="id" value="@comment.Id" />
                                            <button type="submit" class="btn btn-danger">Delete</button>
                                        </form>
                                       
                                    }
                                    @* Upvote Downvote Comment *@
                                    <form asp-controller="Blog" asp-action="UpvoteCommentLike" method="post" class="like-button-form">
                                        <input value="@User.FindFirstValue(ClaimTypes.NameIdentifier)?.ToString()" name="User" hidden />
                                        <input value="@Model.Id" name="Comment" hidden />
                                        <button type="submit" class="reaction-button like-button">
                                            <i class="fas fa-thumbs-up"></i> <span id="upvote-count-@Model.Id">@comment.LikeCount</span>
                                        </button>

                                    </form>
                                    <form asp-controller="Blog" asp-action="DownvoteCommentLike" method="post" class="like-button-form">
                                        <input value="@User.FindFirstValue(ClaimTypes.NameIdentifier)?.ToString()" name="User" hidden />
                                        <input value="@Model.Id" name="Comment" hidden />
                                        <button id="downvote" type="submit" class="reaction-button"><i class="fas fa-thumbs-down"></i> 
                                            <span id="downvote-count"> @(comment.DislikeCount)</span></button>
                                    </form>
                                </div>
                                <p>@comment.Content</p>
                            </li>
                        }
                    }
                    else
                    {
                        <li>No comments yet.</li>
                    }
                </ul>
                @if (User.Identity.IsAuthenticated)
                {
                    
                

                <form id="comment-form" method="post" action="/Blog/CreateComment">
                    <label for="comment-text">Add a comment:</label>
                    <textarea id="comment-text" name="Content" placeholder="Write your comment here" rows="3"></textarea>
                    <input type="hidden" name="BlogId" value="@Model.Id" />
                    <button type="submit">Add Comment</button>
                </form>
                }
            </div>

        </div>
    </div>
</section>
@section Scripts {
    <script>
        document.getElementById('upvote').addEventListener('click', function() {
            let upvoteCount = document.getElementById('upvote-count');
            upvoteCount.innerText = parseInt(upvoteCount.innerText) + 1;
        });
        document.getElementById('downvote').addEventListener('click', function() {
            let downvoteCount = document.getElementById('downvote-count');
            downvoteCount.innerText = parseInt(downvoteCount.innerText) + 1;
        });
        document.getElementById('comment-form').addEventListener('submit', function (e) {
            e.preventDefault();
            const commentText = document.getElementById('comment-text').value.trim();
            if (commentText.length === 0) {
                alert("Please enter a comment.");
                return;
            }
            const commentList = document.getElementById('comments-list');
            const newComment = document.createElement('li');
            newComment.textContent = commentText;
            if (commentList.children.length === 1 && commentList.children[0].textContent === "No comments yet.") {
                commentList.innerHTML = '';
            }
            commentList.appendChild(newComment);
            document.getElementById('comment-text').value = '';
        });

        $(document).ready(function () {
            $('.like-button-form').submit(function (event) {
                event.preventDefault();
                var form = $(this);
                var url = form.attr('action');
                var method = form.attr('method');
                var data = form.serialize();

                $.ajax({
                    url: url,
                    type: method,
                    data: data,
                    success: function (response) {
                        // Update the like count displayed on the page
                        var commentId = form.find('input[name="Comment"]').val();
                        var likeCountElement = $('#upvote-count-' + commentId);
                        likeCountElement.text(response.likeCount); // Assuming the API response contains the updated like count
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                    }
                });
            });
        });


    </script>

    

}
